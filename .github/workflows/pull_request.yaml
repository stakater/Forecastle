name: Pull Request

on:
  pull_request:
    branches:
      - master

env:
  DOCKER_FILE_PATH: Dockerfile
  KUBERNETES_VERSION: "1.22.2"
  KIND_VERSION: "0.10.0"
  HELM_VERSION: "3.16.3"
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: ${{github.event.pull_request.head.sha}}

    - name: Set up Go
      id: go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Install Dependencies
      run: |
        make install

    - name: Lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0
        golangci-lint run --timeout=10m ./...

    - name: Generate Tag
      id: generate_tag
      run: |
        sha=${{ github.event.pull_request.head.sha }}
        tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
        echo "GIT_TAG=$(echo ${tag})" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate image repository path for ghcr registry
      run: |
        echo GHCR_IMAGE_REPOSITORY=${{env.REGISTRY}}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    # To identify any broken changes in dockerfiles or dependencies
    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKER_FILE_PATH  }}
        pull: true
        push: false
        cache-to: type=inline
        build-args: BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
        platforms: linux/amd64,linux/arm,linux/arm64
        tags: |
          ${{ env.GHCR_IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

  test-helm:
    runs-on: ubuntu-latest
    name: Test Helm
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    steps:

    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: ${{github.event.pull_request.head.sha}}

    - uses: d3adb5/helm-unittest-action@v2
      with:
        helm-version: v${{ env.HELM_VERSION }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Helm Lint
      run: |
        cd deployments/kubernetes/chart/forecastle
        helm lint
